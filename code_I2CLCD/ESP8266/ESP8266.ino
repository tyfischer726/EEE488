#include "arduino_secrets.h"
// ArduinoJson - Version: 7.0.4
#include <ArduinoJson.h>

/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/a7f50502-67d2-4575-8994-0015a28753dd 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  int spots_available;
  bool spot_monitoring;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"

int monitorPIN = D8;

///// Arduino to ESP8266 /////
StaticJsonDocument<1024> doc;

void setup() {
  ///////////////////////
  ///// Cloud Setup /////
  ///////////////////////
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
  
  ///////////////////////
  /////  Our Setup  /////
  ///////////////////////
  
  pinMode(LED_BUILTIN, OUTPUT);
  setup_spot_monitoring();
}

void loop() {
  ArduinoCloud.update();
  // Your code here
  
  if (Serial.available() > 0){
    DeserializationError error = deserializeJson(doc, Serial);

    if (error) {
      Serial.print("deserializeJson() failed: ");
      Serial.println(error.c_str());
    }
    else {
      updateData();
    // Just printing for troubleshooting
      printData();
    }
  }
  
  updateSpotMonitoring();
  Serial.println(spot_monitoring);    // Printing for troubleshooting
  flashLED();
}


/*
  Since these variables are READ_WRITE variable, each function below is
  executed every time a new value is received from IoT Cloud.
*/
void onSpotsAvailableChange()  {
  // Add your code here to act upon SpotsAvailable change
}
void onSpotMonitoringChange()  {
  // Add your code here to act upon SpotMonitoring change
}
void onRedChange()  {
  // Add your code here to act upon SpotMonitoring change
}
void onGreenChange()  {
  // Add your code here to act upon SpotMonitoring change
}
void onBlueChange()  {
  // Add your code here to act upon SpotMonitoring change
}